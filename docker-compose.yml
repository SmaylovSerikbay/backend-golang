version: '3.8'

services:
  api:
    build: .
    container_name: api
    ports:
      - "8080:8080"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=taxi_db
      - JWT_SECRET=VkYp3s6v9y&E)H@McQfTjWnZr4u7x!
    command: sh -c "./wait-for.sh db:5432 -- ./main"
    networks:
      - app-network

  admin:
    build: 
      context: ./admin
      dockerfile: Dockerfile
    container_name: admin
    expose:
      - "8000"
    volumes:
      - ./admin:/app
      - ./uploads:/app/uploads
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - db
      - api
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=taxi_db
      - GO_API_URL=http://api:8080/api
      - ADMIN_API_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjowLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE3NzM2NTM1MzEsImlhdCI6MTc0MjExNzUzMX0.9BOK0_cPzIRjJq6tdv8gdy6nyETHbCpxBeaj92IUqio
      - DJANGO_SETTINGS_MODULE=taxi_admin.settings
    command: >
      sh -c "
        while ! nc -z db 5432; do
          echo 'Waiting for database to be ready...'
          sleep 2
        done &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        python create_superuser.py &&
        gunicorn --bind 0.0.0.0:8000 taxi_admin.wsgi:application"
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/usr/share/nginx/html/static
      - media_volume:/usr/share/nginx/html/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - admin
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=taxi_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge 