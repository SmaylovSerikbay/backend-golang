version: '3.8'

services:
  api:
    build: .
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=taxi
      - JWT_SECRET=VkYp3s6v9y&E)H@McQfTjWnZr4u7x!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DGIS_API_KEY=${DGIS_API_KEY}
      - GREEN_API_INSTANCE_ID=7105218021
      - GREEN_API_TOKEN=04c9f23c325147a1b73778ff903fdec1d4ebb4cceac04d84b7
      - GREEN_API_BASE_URL=https://api.greenapi.com
      - GREEN_API_MEDIA_URL=https://media.greenapi.com
    command: sh -c "./wait-for.sh db:5432 -- ./main"
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - app-network
    restart: always

  db:
    image: postgres:13
    container_name: db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=taxi
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    restart: always

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: always

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_NAME=taxi
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=100
    ports:
      - "6432:6432"
    depends_on:
      - db
    networks:
      - app-network
    restart: always

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: always

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: always

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge 